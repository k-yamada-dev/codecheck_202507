steps:
  # -----------------------------------------------------------------------------
  # Build and Push Web App
  # -----------------------------------------------------------------------------
  # Firebaseのサービスアカウントキーをファイルとして保存する
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Prepare Build Files'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # 1. Firebaseサービスアカウントキーのファイルを準備
        if [ -z "${_SECRET_FIREBASE_SA}" ]; then
          echo "ERROR: The substitution variable '_SECRET_FIREBASE_SA' is not set." >&2
          exit 1
        fi
        gcloud secrets versions access "${_SECRET_FIREBASE_SA}/versions/latest" > firebase-sa-key.json

        # 2. Next.jsのビルド用の.envファイルを準備
        echo "Creating .env file for the build..."

        # ビルドに必要なシークレットを取得し、tr -d '\r\n' で改行と復帰コードを完全に削除
        firebase_config_value=$(gcloud secrets versions access "${_NEXT_PUBLIC_FIREBASE_CONFIG}/versions/latest" | tr -d '\r\n')
        nextauth_value=$(gcloud secrets versions access "${_SECRET_NEXTAUTH_SECRET}/versions/latest" | tr -d '\r\n')
        db_url_value=$(gcloud secrets versions access "${_SECRET_DATABASE_URL}/versions/latest" | tr -d '\r\n')
        gcs_bucket_name_value=$(gcloud secrets versions access "${_GCS_BUCKET_NAME}/versions/latest" | tr -d '\r\n')

        # .envファイルを作成するディレクトリを apps/web/ に変更
        mkdir -p apps/web

        # here-documentを使って正しい場所に.envファイルを生成
        # JSON値のクォートは削除し、他の値はダブルクォートで囲む
        cat <<EOT > apps/web/.env
        NEXT_PUBLIC_FIREBASE_CONFIG=${firebase_config_value}
        NEXTAUTH_SECRET="${nextauth_value}"
        DATABASE_URL="${db_url_value}"
        GCS_BUCKET_NAME="${gcs_bucket_name_value}"
        CLOUD_SQL_INSTANCE_CONNECTION_NAME="${_CLOUD_SQL_INSTANCE_CONNECTION_NAME}"
        EOT

        echo "--- .env file created successfully in apps/web/ ---"
        echo "--- Raw .env content (DEBUG) ---"
        # cat -A コマンドで非表示文字を含めてファイルの内容を出力する
        cat -A apps/web/.env
        echo "--- End Raw .env content ---"

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Web'
    args:
      - 'build'
      - '--tag=$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REGISTRY_REPO/$_SERVICE_NAME_WEB:$COMMIT_SHA'
      - '--file=Dockerfile'
      - '.'

  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Web'
    args:
      - 'push'
      - '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REGISTRY_REPO/$_SERVICE_NAME_WEB:$COMMIT_SHA'

  # -----------------------------------------------------------------------------
  # Deploy Web App to Cloud Run
  # -----------------------------------------------------------------------------
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Web'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # --- NEXTAUTH_URL の "値" をシークレットから取得 ---
        nextauth_url_value=$(gcloud secrets versions access "projects/$PROJECT_ID/secrets/$(basename "${_NEXTAUTH_URL}")/versions/latest" | tr -d '\r\n')

        # --- シークレットの短い名前を抽出 ---
        db_secret_name=$(basename "${_SECRET_DATABASE_URL}")
        nextauth_secret_name=$(basename "${_SECRET_NEXTAUTH_SECRET}")
        gcs_secret_name=$(basename "${_GCS_BUCKET_NAME}")
        firebase_sa_secret_name=$(basename "${_SECRET_FIREBASE_SA}")
        firebase_config_secret_name=$(basename "${_NEXT_PUBLIC_FIREBASE_CONFIG}")

        # --- gcloud run deploy を実行 ---
        gcloud run deploy "$_SERVICE_NAME_WEB" \
          --image="$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REGISTRY_REPO/$_SERVICE_NAME_WEB:$COMMIT_SHA" \
          --region "$_GCP_REGION" \
          --platform "managed" \
          --quiet \
          --allow-unauthenticated \
          --add-cloudsql-instances="$_CLOUD_SQL_INSTANCE_CONNECTION_NAME" \
          --update-env-vars="CLOUD_SQL_INSTANCE_CONNECTION_NAME=${_CLOUD_SQL_INSTANCE_CONNECTION_NAME},NEXTAUTH_URL=${nextauth_url_value}" \
          # --set-secrets には "KEY=projects/PROJECT_ID/secrets/SECRET_NAME:latest" の形式で渡す
          --set-secrets="DATABASE_URL=projects/$PROJECT_ID/secrets/${db_secret_name}:latest" \
          --set-secrets="NEXTAUTH_SECRET=projects/$PROJECT_ID/secrets/${nextauth_secret_name}:latest" \
          --set-secrets="GCS_BUCKET_NAME=projects/$PROJECT_ID/secrets/${gcs_secret_name}:latest" \
          --set-secrets="FIREBASE_SERVICE_ACCOUNT_JSON=projects/$PROJECT_ID/secrets/${firebase_sa_secret_name}:latest" \
          --set-secrets="NEXT_PUBLIC_FIREBASE_CONFIG=projects/$PROJECT_ID/secrets/${firebase_config_secret_name}:latest"

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Make Web Public'
    entrypoint: gcloud
    args:
      - 'run'
      - 'services'
      - 'add-iam-policy-binding'
      - '$_SERVICE_NAME_WEB'
      - '--region=$_GCP_REGION'
      - '--member=allUsers'
      - '--role=roles/run.invoker'

  # -----------------------------------------------------------------------------
  # Build and Push Worker
  # -----------------------------------------------------------------------------
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Worker'
    args:
      - 'build'
      - '--tag=$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REGISTRY_REPO/$_SERVICE_NAME_WORKER:$COMMIT_SHA'
      - '--file=docker/worker.prod.Dockerfile'
      - '.'
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Worker'
    args:
      - 'push'
      - '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REGISTRY_REPO/$_SERVICE_NAME_WORKER:$COMMIT_SHA'

  # -----------------------------------------------------------------------------
  # Deploy Worker to Cloud Run
  # -----------------------------------------------------------------------------
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Worker'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - '$_SERVICE_NAME_WORKER'
      - '--image=$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REGISTRY_REPO/$_SERVICE_NAME_WORKER:$COMMIT_SHA'
      - '--region'
      - '$_GCP_REGION'
      - '--platform'
      - 'managed'
      - '--quiet'
      - '--no-allow-unauthenticated' # Pub/Subからの呼び出しのみ許可
      - '--add-cloudsql-instances=$_CLOUD_SQL_INSTANCE_CONNECTION_NAME'
      # --- 必要に応じて以下のオプションを有効化してください ---
      # - '--service-account=your-service-account@your-project.iam.gserviceaccount.com'
      # - '--update-env-vars=KEY1=VALUE1,KEY2=VALUE2'
      # - '--set-secrets=SECRET_NAME=secret-name:latest'

images:
  - '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REGISTRY_REPO/$_SERVICE_NAME_WEB:$COMMIT_SHA'
  - '$_GCP_REGION-docker.pkg.dev/$PROJECT_ID/$_ARTIFACT_REGISTRY_REPO/$_SERVICE_NAME_WORKER:$COMMIT_SHA'

options:
  logging: CLOUD_LOGGING_ONLY
