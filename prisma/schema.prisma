// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

generator zod {
  provider              = "prisma-zod-generator"
  output                = "../lib/zod"
  isGenerateSelect      = true
  isGenerateInclude     = true
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  imports               = "import { z } from 'zod'; import type { Prisma } from '@prisma/client';"
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  UPLOADER       @map("uploader")
  DOWNLOADER     @map("downloader")
  AUDITOR        @map("auditor")
  TENANT_ADMIN   @map("tenant_admin")
  INTERNAL_ADMIN @map("internal_admin")
}

enum JobType {
  EMBED
  DECODE
}

enum JobStatus {
  PENDING
  RUNNING
  DONE
  ERROR
}

model Tenant {
  id         String    @id @default(cuid())
  name       String
  tenantCode String    @unique @map("tenant_code")
  isDeleted  Boolean   @default(false) @map("is_deleted")
  deletedAt  DateTime? @map("deleted_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  users         User[]
  userRoles     UserRole[]
  jobs          Job[]
  billingUsages BillingUsage[]
  logs          Log[]

  @@map("tenants")
}

model User {
  id         String  @id @default(uuid()) @db.Uuid
  tenantId   String  @map("tenant_id")
  provider   String
  externalId String  @map("external_id")
  name       String
  email      String
  tenantCode String? @map("tenant_code")
  userCode   String? @map("user_code")

  tenant    Tenant     @relation(fields: [tenantId], references: [id])
  jobs      Job[]
  userRoles UserRole[]

  // 監査・論理削除用カラム
  isDeleted Boolean   @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@unique([tenantId, provider, externalId])
  @@map("users")
}

model Job {
  id            String    @id @default(uuid()) @db.Uuid
  tenantId      String    @map("tenant_id")
  userId        String    @map("user_id") @db.Uuid
  userName      String    @map("user_name")
  type          JobType
  status        JobStatus
  startedAt     DateTime  @default(now()) @map("started_at") @db.Timestamptz(6)
  finishedAt    DateTime? @map("finished_at") @db.Timestamptz(6)
  durationMs    Int?      @map("duration_ms")
  thumbnailPath String?   @map("thumbnail_path")
  srcImagePath  String    @map("src_image_path")
  params        Json
  result        Json
  ip            String?   @db.Inet
  ua            String?
  isArchived    Boolean   @default(false) @map("is_archived")
  archivedAt    DateTime? @map("archived_at")
  imageUrl      String    @map("image_url")
  resultUrl     String?   @map("result_url")
  watermark     String?
  confidence    Float?

  tenant Tenant @relation(fields: [tenantId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  logs   Log[]

  // 監査・論理削除用カラム
  isDeleted Boolean   @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@index([tenantId, type, startedAt(sort: Desc)], map: "idx_jobs__tenant_type_started_at")
  @@map("jobs")
}

model Log {
  id       String @id @default(cuid())
  tenantId String @map("tenant_id")
  jobId    String @map("job_id") @db.Uuid
  action   String
  userId   String @map("user_id")
  details  Json?

  tenant Tenant @relation(fields: [tenantId], references: [id])
  job    Job    @relation(fields: [jobId], references: [id])

  // 監査・論理削除用カラム
  isDeleted Boolean   @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("logs")
}

model BillingUsage {
  id          String    @id @default(cuid())
  tenantId    String    @map("tenant_id")
  month       String
  uploads     Int
  apiCalls    Int       @map("api_calls")
  storageGb   Float     @map("storage_gb")
  amount      Float
  isFinalized Boolean   @default(false) @map("is_finalized")
  finalizedAt DateTime? @map("finalized_at")

  tenant Tenant @relation(fields: [tenantId], references: [id])

  // 監査・論理削除用カラム
  isDeleted Boolean   @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("billing_usages")
}

model UserRole {
  userId     String   @map("user_id") @db.Uuid
  tenantId   String   @map("tenant_id")
  role       Role
  assignedAt DateTime @default(now()) @map("assigned_at")

  user   User   @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])

  // 監査・論理削除用カラム
  isDeleted Boolean   @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@id([userId, tenantId, role])
  @@map("user_roles")
}
